"""–•–µ–Ω–¥–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏ XRay."""

from __future__ import annotations

from pathlib import Path
from uuid import uuid4

from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.types.input_file import BufferedInputFile
from loguru import logger
from sqlalchemy import delete

from app.bot.services.xray import create_client, generate_qr_code, remove_client, reload_xray
from app.config import get_settings
from app.db import get_session
from app.models.key import Key

router = Router()


async def _store_key(uuid: str, email: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        uuid (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ XRay.
        email (str): –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π/–ø–æ—á—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–ª—é—á–∞.
    """

    async with get_session() as session:
        session.add(Key(uuid=uuid, email=email))
        await session.commit()


async def _delete_key_record(uuid: str) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª—é—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        uuid (str): –ö–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å.
    """

    async with get_session() as session:
        result = await session.execute(delete(Key).where(Key.uuid == uuid))
        if result.rowcount:
            await session.commit()


@router.callback_query(F.data == "create_key")
async def handle_create_key(callback: CallbackQuery) -> None:
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞.
    """

    settings = get_settings()
    config_path = Path(settings.xray_config_path)
    client_uuid = str(uuid4())
    email = f"user_{callback.from_user.id}@vpn.local"

    try:
        vless_link = create_client(client_uuid, email, config_path)
        await _store_key(client_uuid, email)
        reload_xray()
    except Exception as error:  # noqa: BLE001
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: %s", error)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á", show_alert=True)
        return

    qr_buffer = generate_qr_code(vless_link)
    qr_file = BufferedInputFile(qr_buffer.getvalue(), filename=f"{client_uuid}.png")

    await callback.message.answer(f"‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω\n{vless_link}")
    await callback.message.answer_document(qr_file, caption="QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    await callback.answer("–ö–ª—é—á —Å–æ–∑–¥–∞–Ω", show_alert=True)
    logger.info("–°–æ–∑–¥–∞–Ω –∫–ª—é—á %s", client_uuid)


@router.callback_query(F.data.startswith("delete_key:"))
async def handle_delete_key(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –ø–æ UUID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Å UUID –∫–ª—é—á–∞.
    """

    _, _, uuid = callback.data.partition(":")
    settings = get_settings()
    config_path = Path(settings.xray_config_path)

    if not uuid:
        await callback.answer("UUID –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    removed = remove_client(uuid, config_path)
    if removed:
        await _delete_key_record(uuid)
        reload_xray()
        await callback.answer("–ö–ª—é—á —É–¥–∞–ª—ë–Ω", show_alert=True)
        await callback.message.answer(f"üóë –ö–ª—é—á {uuid} —É–¥–∞–ª—ë–Ω")
        logger.info("–£–¥–∞–ª—ë–Ω –∫–ª—é—á %s", uuid)
    else:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data == "delete_key")
async def handle_delete_prompt(callback: CallbackQuery) -> None:
    """–ü–æ–¥—Å–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –∫–∞–∫ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        callback (CallbackQuery): –°–æ–±—ã—Ç–∏–µ –æ—Ç –±–∞–∑–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏ ¬´–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á¬ª.
    """

    await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –∏–∑ —Å–ø–∏—Å–∫–∞", show_alert=True)
