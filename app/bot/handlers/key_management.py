"""–•–µ–Ω–¥–ª–µ—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏ XRay."""

from __future__ import annotations

from datetime import datetime, timedelta, timezone
from pathlib import Path
from typing import Any
from uuid import uuid4

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types.input_file import BufferedInputFile
from loguru import logger
from sqlalchemy import delete, select

from app.bot.services.xray import create_client, generate_qr_code, remove_client, reload_xray
from app.config import get_settings
from app.db import get_session
from app.models.key import Key

router = Router()

EXPIRATION_CHOICES: dict[str, tuple[str, timedelta | None]] = {
    "1d": ("1 –¥–µ–Ω—å", timedelta(days=1)),
    "7d": ("7 –¥–Ω–µ–π", timedelta(days=7)),
    "30d": ("30 –¥–Ω–µ–π", timedelta(days=30)),
    "permanent": ("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", None),
}

DEVICE_CHOICES: dict[str, tuple[str, int | None]] = {
    "1": ("1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", 1),
    "3": ("3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", 3),
    "5": ("5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤", 5),
    "unlimited": ("–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è", None),
}

PENDING_CREATIONS: dict[int, dict[str, Any]] = {}


async def _store_key(uuid: str, email: str, *, expires_at: datetime | None, device_limit: int | None) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª—é—á–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""

    async with get_session() as session:
        session.add(Key(uuid=uuid, email=email, expires_at=expires_at, device_limit=device_limit))
        await session.commit()


async def _delete_key_record(uuid: str) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª—é—á–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    async with get_session() as session:
        result = await session.execute(delete(Key).where(Key.uuid == uuid))
        if result.rowcount:
            await session.commit()


async def _fetch_keys() -> list[Key]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    async with get_session() as session:
        result = await session.execute(select(Key))
        return list(result.scalars().all())


def _build_delete_keyboard(keys: list[Key]) -> InlineKeyboardMarkup:
    buttons = [
        [
            InlineKeyboardButton(
                text=f"üóë {key.email or key.uuid[:8]}",
                callback_data=f"delete_key:{key.uuid}",
            )
        ]
        for key in keys
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _build_expiration_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=label, callback_data=f"create_key:expires:{value}")]
        for value, (label, _) in EXPIRATION_CHOICES.items()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _build_device_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text=label, callback_data=f"create_key:devices:{value}")]
        for value, (label, _) in DEVICE_CHOICES.items()
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def _format_expiration(expires_at: datetime | None) -> str:
    if not expires_at:
        return "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å—Ä–æ–∫—É"
    return "–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: " + expires_at.astimezone(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")


def _format_device_limit(limit: int | None) -> str:
    return f"–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {limit}" if limit else "–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω"


@router.callback_query(F.data == "create_key")
async def handle_create_key(callback: CallbackQuery) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞."""

    settings = get_settings()
    user_id = callback.from_user.id
    PENDING_CREATIONS[user_id] = {
        "email": f"user_{user_id}@vpn.local",
        "config_path": Path(settings.xray_config_path),
    }

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞:",
        reply_markup=_build_expiration_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("create_key:expires:"))
async def handle_create_key_expiration(callback: CallbackQuery) -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤."""

    user_id = callback.from_user.id
    pending = PENDING_CREATIONS.get(user_id)
    if pending is None:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return

    _, _, value = callback.data.split(":", maxsplit=2)
    choice = EXPIRATION_CHOICES.get(value)
    if choice is None:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    expires_delta = choice[1]
    expires_at = None if expires_delta is None else datetime.now(timezone.utc) + expires_delta
    pending["expires_at"] = expires_at
    PENDING_CREATIONS[user_id] = pending

    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤:",
        reply_markup=_build_device_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data.startswith("create_key:devices:"))
async def handle_create_key_devices(callback: CallbackQuery) -> None:
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å —É—á—ë—Ç–æ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤."""

    user_id = callback.from_user.id
    pending = PENDING_CREATIONS.get(user_id)
    if pending is None:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return

    _, _, value = callback.data.split(":", maxsplit=2)
    choice = DEVICE_CHOICES.get(value)
    if choice is None:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä", show_alert=True)
        return

    pending["device_limit"] = choice[1]

    try:
        await _finalize_creation(callback, pending)
        await callback.answer("–ö–ª—é—á —Å–æ–∑–¥–∞–Ω", show_alert=True)
    except Exception as error:  # noqa: BLE001
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: %s", error)
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á", show_alert=True)
    finally:
        PENDING_CREATIONS.pop(user_id, None)


async def _finalize_creation(callback: CallbackQuery, data: dict[str, Any]) -> None:
    client_uuid = str(uuid4())
    email: str = data["email"]
    expires_at: datetime | None = data.get("expires_at")
    device_limit: int | None = data.get("device_limit")
    config_path: Path = Path(data["config_path"])

    vless_link = create_client(client_uuid, email, config_path)
    await _store_key(client_uuid, email, expires_at=expires_at, device_limit=device_limit)
    reload_xray()

    qr_buffer = generate_qr_code(vless_link)
    qr_file = BufferedInputFile(qr_buffer.getvalue(), filename=f"{client_uuid}.png")

    info_lines = [
        "‚úÖ –ö–ª—é—á —Å–æ–∑–¥–∞–Ω",
        vless_link,
        _format_expiration(expires_at),
        _format_device_limit(device_limit),
    ]

    await callback.message.answer("\n".join(info_lines))
    await callback.message.answer_document(qr_file, caption="QR-–∫–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
    logger.info(
        "–°–æ–∑–¥–∞–Ω –∫–ª—é—á %s (expires=%s, limit=%s)",
        client_uuid,
        expires_at,
        device_limit,
    )


@router.callback_query(F.data.startswith("delete_key:"))
async def handle_delete_key(callback: CallbackQuery) -> None:
    """–£–¥–∞–ª–∏—Ç—å –∫–ª—é—á –ø–æ UUID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""

    _, _, uuid = callback.data.partition(":")
    settings = get_settings()
    config_path = Path(settings.xray_config_path)

    if not uuid:
        await callback.answer("UUID –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    removed = remove_client(uuid, config_path)
    if removed:
        await _delete_key_record(uuid)
        reload_xray()
        await callback.answer("–ö–ª—é—á —É–¥–∞–ª—ë–Ω", show_alert=True)
        await callback.message.answer(f"üóë –ö–ª—é—á {uuid} —É–¥–∞–ª—ë–Ω")
        logger.info("–£–¥–∞–ª—ë–Ω –∫–ª—é—á %s", uuid)
    else:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data == "delete_key")
async def handle_delete_prompt(callback: CallbackQuery) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""

    keys = await _fetch_keys()
    if not keys:
        await callback.answer("–ö–ª—é—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç", show_alert=True)
        return

    keyboard = _build_delete_keyboard(keys)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "list_keys")
async def handle_list_keys(callback: CallbackQuery) -> None:
    """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."""

    keys = await _fetch_keys()
    if not keys:
        await callback.answer("–ö–ª—é—á–µ–π –ø–æ–∫–∞ –Ω–µ—Ç", show_alert=True)
        return

    lines = []
    for key in keys:
        lines.append(
            "\n".join(
                filter(
                    None,
                    [
                        f"‚Ä¢ {key.email or '–±–µ–∑_email'}",
                        f"  UUID: {key.uuid}",
                        f"  {_format_expiration(key.expires_at)}",
                        f"  {_format_device_limit(key.device_limit)}",
                    ],
                )
            )
        )

    await callback.message.answer("–°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π:\n" + "\n".join(lines))
    await callback.answer()


@router.callback_query(F.data == "settings")
async def handle_settings(callback: CallbackQuery) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º."""

    settings = get_settings()
    info = (
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n"
        f"‚Ä¢ XRAY_CONFIG_PATH: {settings.xray_config_path}\n"
        f"‚Ä¢ XRAY_HOST: {settings.xray_host}\n"
        f"‚Ä¢ XRAY_PORT: {settings.xray_port}\n"
        f"‚Ä¢ XRAY_RELOAD_COMMAND: {settings.xray_reload_command or '–Ω–µ –∑–∞–¥–∞–Ω–∞'}"
    )
    await callback.message.answer(info)
    await callback.answer()
