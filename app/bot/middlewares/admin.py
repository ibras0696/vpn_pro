"""Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""

from typing import Any, Awaitable, Callable, Iterable

from aiogram import BaseMiddleware
from aiogram.types import CallbackQuery, Message
from loguru import logger


class AdminAccessMiddleware(BaseMiddleware):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""

    def __init__(self, admin_id: int, allowed_commands: Iterable[str] | None = None) -> None:
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            admin_id (int): Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
            allowed_commands (Iterable[str] | None): –ö–æ–º–∞–Ω–¥—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º.
        """

        self._admin_id = admin_id
        self._allowed_commands = {cmd.lstrip("/").lower() for cmd in (allowed_commands or [])}

    async def __call__(
        self,
        handler: Callable[[Any, dict[str, Any]], Awaitable[Any]],
        event: Message | CallbackQuery,
        data: dict[str, Any],
    ) -> Any:
        """–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            handler (Callable): –°–ª–µ–¥—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ü–µ–ø–æ—á–∫–∏.
            event (Message | CallbackQuery): –í—Ö–æ–¥—è—â–µ–µ —Å–æ–±—ã—Ç–∏–µ Telegram.
            data (dict[str, Any]): –ö–æ–Ω—Ç–µ–∫—Å—Ç Aiogram.

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            Any: –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ª–∏–±–æ None –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ.
        """

        user = getattr(event, "from_user", None)
        user_id = getattr(user, "id", None)

        if user_id != self._admin_id and not self._is_allowed(event):
            await self._reject(event)
            logger.warning("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s", user_id)
            return None
        return await handler(event, data)

    def _is_allowed(self, event: Message | CallbackQuery) -> bool:
        if not self._allowed_commands:
            return False

        if hasattr(event, "text"):
            text = (getattr(event, "text") or "").strip()
            if text.startswith("/"):
                command = text.split()[0][1:]
                command = command.split("@", maxsplit=1)[0]
                return command.lower() in self._allowed_commands

        return False

    @staticmethod
    async def _reject(event: Message | CallbackQuery) -> None:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–∞–∑–µ –≤ –¥–æ—Å—Ç—É–ø–µ."""

        text = "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω"
        if isinstance(event, CallbackQuery):
            await event.answer(text, show_alert=True)
            if event.message:
                await event.message.answer(text)
        elif hasattr(event, "answer"):
            await event.answer(text)
